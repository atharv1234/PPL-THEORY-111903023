
;; Function main (main, funcdef_no=0, decl_uid=1832, cgraph_uid=0, symbol_order=0) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_3 = a_1
_3 = c_2
_5 = _3
_5 = b_4
b_6 = _3
b_6 = _5
ESCAPED = b_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_3 = { }
a_1 = { }
c_2 = { }
_5 = { }
b_4 = { }
b_6 = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int c;
  int b;
  int a;
  int _3;
  int _5;

  <bb 2>:
  _3 = a_1(D) + c_2(D);
  _5 = _3 + b_4(D);
  b_6 = _3 * _5;
  return b_6;

}


