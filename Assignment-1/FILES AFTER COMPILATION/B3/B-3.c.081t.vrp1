
;; Function main (main, funcdef_no=13, decl_uid=2572, cgraph_uid=13, symbol_order=13) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5 3
;; 2 succs { 7 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_10 -> { a_1 }
b_11 -> { b_3 }
Incremental SSA update started at block: 7
Number of blocks in CFG: 9
Number of blocks to update: 6 ( 67%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_12 -> { a_1 }
a_13 -> { a_1 }
a_14 -> { a_1 }
a_15 -> { a_1 }
Incremental SSA update started at block: 7
Number of blocks in CFG: 10
Number of blocks to update: 7 ( 70%)



Value ranges after VRP:

a_1: [4, 100]
b_2: [b_6, b_6]
b_3: VARYING
b_4(D): UNDEFINED
b_6: VARYING
a_7: [5, 100]
a_10: [100, 100]  EQUIVALENCES: { a_1 } (1 elements)
b_11: [b_3, b_3]
a_13: [4, 99]  EQUIVALENCES: { a_1 a_14 } (2 elements)
a_14: [4, 99]  EQUIVALENCES: { a_1 } (1 elements)
a_15: [100, 100]  EQUIVALENCES: { a_1 } (1 elements)


Simplified relational if (a_1 <= 99)
 into if (a_1 != 100)

Folding predicate a_14 <= 3 to 0
Removing basic block 3
Removing basic block 9
Removing basic block 4
Merging blocks 11 and 5
Merging blocks 11 and 6

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_2 -> { a_1 }
b_5 -> { b_3 }
b_13 -> { b_3 }
a_15 -> { a_1 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 7
Number of blocks to update: 4 ( 57%)


main ()
{
  int b;
  int a;

  <bb 2>:
  goto <bb 6>;

  <bb 3>:
  # a_2 = PHI <a_1(4), a_15(6)>
  # b_5 = PHI <b_3(4), b_13(6)>
  b_6 = b_5 * 2;
  a_7 = a_2 + 1;

  <bb 4>:
  # a_1 = PHI <a_7(3)>
  # b_3 = PHI <b_6(3)>
  if (a_1 != 100)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  # a_10 = PHI <100(4)>
  # b_11 = PHI <b_3(4)>
  printf ("%d%d", 100, b_11);
  return 0;

  <bb 6>:
  # a_15 = PHI <4(2)>
  # b_13 = PHI <b_4(D)(2)>
  goto <bb 3>;

}


