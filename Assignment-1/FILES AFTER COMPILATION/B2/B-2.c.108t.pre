
;; Function main (main, funcdef_no=0, decl_uid=1833, cgraph_uid=0, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
i_10 = i_6
i_10 = &NULL
a_11 = a_5
a_11 = &NONLOCAL
N = NONLOCAL
N.0_4 = N
a_5 = N.0_4
a_5 = a_11
i_6 = i_10
i_6 = &NONLOCAL
ESCAPED = a_5

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as a_11
STOREDANYTHING = { }
INTEGER = { ANYTHING }
i_10 = { NULL NONLOCAL }
i_6 = { NULL NONLOCAL } same as i_10
a_11 = { ESCAPED NONLOCAL }
a_5 = { ESCAPED NONLOCAL } same as a_11
N.0_4 = { ESCAPED NONLOCAL } same as a_11
N = { ESCAPED NONLOCAL } same as a_11


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 5 4
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 5 4 }
;; 5 succs { 3 }
;; 4 succs { 1 }
Removing basic block 5
main ()
{
  int a;
  int i;
  int pretmp_8;

  <bb 2>:
  pretmp_8 = N;

  <bb 3>:
  # i_10 = PHI <i_6(3), 0(2)>
  # a_11 = PHI <a_5(3), 10(2)>
  a_5 = pretmp_8 + a_11;
  i_6 = i_10 + 1;
  if (i_6 != 4)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 4>:
  return a_5;

}


