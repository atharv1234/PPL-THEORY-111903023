
;; Function main (main, funcdef_no=0, decl_uid=1833, cgraph_uid=0, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
N = NONLOCAL
N.0_6 = N
a_7 = a_2
a_7 = N.0_6
i_8 = i_1
i_8 = &NONLOCAL
i_1 = &NULL
i_1 = i_8
a_2 = &NONLOCAL
a_2 = a_7
a_9 = a_2
ESCAPED = a_9

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as N
STOREDANYTHING = { }
INTEGER = { ANYTHING }
N.0_6 = { ESCAPED NONLOCAL } same as N
N = { ESCAPED NONLOCAL }
a_7 = { ESCAPED NONLOCAL } same as N
a_2 = { ESCAPED NONLOCAL } same as N
i_8 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as i_8
a_9 = { ESCAPED NONLOCAL } same as N


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int a;
  int i;
  int N.0_6;

  <bb 2>:
  goto <bb 4>;

  <bb 3>:
  N.0_6 = N;
  a_7 = a_2 + N.0_6;
  i_8 = i_1 + 1;

  <bb 4>:
  # i_1 = PHI <0(2), i_8(3)>
  # a_2 = PHI <10(2), a_7(3)>
  if (i_1 <= 3)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  a_9 = a_2;
  return a_9;

}


