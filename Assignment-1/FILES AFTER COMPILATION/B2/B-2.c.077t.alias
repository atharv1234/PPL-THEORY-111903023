
;; Function main (main, funcdef_no=0, decl_uid=1833, cgraph_uid=0, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
N = NONLOCAL
N.0_4 = N
a_5 = a_2
a_5 = N.0_4
i_6 = i_1
i_6 = &NONLOCAL
i_1 = &NULL
i_1 = i_6
a_2 = &NONLOCAL
a_2 = a_5
ESCAPED = a_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as N
STOREDANYTHING = { }
INTEGER = { ANYTHING }
N.0_4 = { ESCAPED NONLOCAL } same as N
N = { ESCAPED NONLOCAL }
a_5 = { ESCAPED NONLOCAL } same as N
a_2 = { ESCAPED NONLOCAL } same as N
i_6 = { NULL NONLOCAL }
i_1 = { NULL NONLOCAL } same as i_6


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int a;
  int i;
  int N.0_4;

  <bb 2>:
  goto <bb 4>;

  <bb 3>:
  N.0_4 = N;
  a_5 = a_2 + N.0_4;
  i_6 = i_1 + 1;

  <bb 4>:
  # i_1 = PHI <0(2), i_6(3)>
  # a_2 = PHI <10(2), a_5(3)>
  if (i_1 <= 3)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  return a_2;

}


